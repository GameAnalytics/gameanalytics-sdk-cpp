# This workflow is for a CMake project running on multiple platforms. 
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake Build and Test 

on:
  workflow_call:
    inputs:
      build_type:
        description: 'Build type (e.g., "Debug", "Release", "RelWithDebInfo", "MinSizeRel")'
        default: '"Debug"'
        required: true
        type: string
      upload_artifacts:
        description: 'Whether to upload artifacts (true/false)'
        default: false
        required: true
        type: boolean

jobs:
  cmake_build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-24.04, windows-latest, macOS-latest] 
        build_type: ${{ fromJSON(format('[{0}]', inputs.build_type || '"Debug","Release"')) }}
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-24.04
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-24.04
            c_compiler: clang
            cpp_compiler: clang++
          - os: macOS-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-24.04
            c_compiler: cl
          - os: macOS-latest
            c_compiler: cl
          - os: macOS-latest
            c_compiler: gcc

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Set Clang 16 as default
      if: matrix.os == 'ubuntu-24.04' && matrix.c_compiler == 'clang'
      run: |
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-16 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-16 100

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }} --verbose --output-on-failure

    - name: Package Build Artifacts
      if: ${{ inputs.upload_artifacts && success() }}
      run: |
        mkdir -p ${{ steps.strings.outputs.build-output-dir }}/package
        # Adjust the path to your built library files
        cp ${{ steps.strings.outputs.build-output-dir }}/${{ matrix.build_type }}/*GameAnalytics.* ${{ steps.strings.outputs.build-output-dir }}/package/
        cp -r ${{ github.workspace }}/include ${{ steps.strings.outputs.build-output-dir }}/package/
        
    - name: Upload Build Artifact
      if: ${{ inputs.upload_artifacts && success() }}
      uses: actions/upload-artifact@v4
      with:
        name: ga-cpp-sdk-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}
        path: ${{ steps.strings.outputs.build-output-dir }}/package/
        retention-days: 3
    
